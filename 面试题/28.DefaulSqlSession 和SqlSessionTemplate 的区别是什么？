1）为什么SqlSessionTemplate 是线程安全的？
其内部类SqlSessionInterceptor 的invoke()方法中的getSqlSession()方法：
如果当前线程已经有存在的SqlSession 对象，会在ThreadLocal 的容器中拿到
SqlSessionHolder，获取DefaultSqlSession。
如果没有，则会new 一个SqlSession，并且绑定到SqlSessionHolder，放到
ThreadLocal 中。
SqlSessionTemplate 中在同一个事务中使用同一个SqlSession。
调用closeSqlSession()关闭会话时，如果存在事务，减少holder 的引用计数。否
则直接关闭SqlSession。



2）在编程式的开发中，有什么方法保证SqlSession 的线程安全？
SqlSessionManager 同时实现了SqlSessionFactory、SqlSession 接口，通过
ThreadLocal 容器维护SqlSession。